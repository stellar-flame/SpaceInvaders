import os
import pygame
import random
from pygame.math import Vector2
from pygame.sprite import Group
from pygame.sprite import Sprite



os.environ['SDL_VIDEO_CENTERED'] = '1'


class Node(Sprite):
    def __init__(self, grid_pos, texture = None):
        super().__init__()
        self.grid_pos = grid_pos
        self.set_texture(texture)
        self.rect = self.image.get_rect()
        self.update_pixel_pos()

    def set_texture(self, texture):
        self.image = pygame.image.load(texture).convert_alpha()

    def update_pixel_pos(self):
        self.rect.topleft = Game.grid_to_pixel(self.grid_pos)

    def process_input(self, event):
        pass

    def update(self, boundaries, delta):
        pass


class AnimatedSprite(Node):
    def __init__(self, grid_pos, texture, frame_rate, frame_width, frame_height, num_frames, loop=True):
        self.images = self.load_sprite_sheet(texture, frame_width, frame_height, num_frames)
        self.frame_rate = frame_rate  # How many frames to wait before switching frames
        self.timer = 0
        self.current_frame = 0
        self.loop = loop
        super().__init__(grid_pos)

    def set_texture(self, texture):
        self.image = self.images[self.current_frame]  # Set the initial image

    def load_sprite_sheet(self, texture, frame_width, frame_height, num_frames):
        sprite_sheet = pygame.image.load(texture).convert_alpha()
        frames = []
        for i in range(num_frames):
            # Extract each frame from the sprite sheet
            frame = sprite_sheet.subsurface((i * frame_width, 0, frame_width, frame_height))
            frames.append(frame)
        return frames

    def update(self, boundaries, delta):
        self.timer += 1
        if self.timer >= self.frame_rate:
            if not self.loop and self.current_frame == len(self.images)-1:
                self.kill()
            else:
                # Reset the timer and move to the next frame
                self.timer = 0
                self.current_frame = (self.current_frame + 1) % len(self.images)
                self.image = self.images[self.current_frame]


class AlienShip(Node):
    ALIEN_SPAWN_EVENT = pygame.USEREVENT + 1

    def __init__(self):
        super().__init__(Vector2(16, 0), "assets/alien.png")
        self.speed = 5
        self.direction = -1

    def update(self, boundaries, delta):
        self.grid_pos.x += self.direction * self.speed * delta

        if ((self.grid_pos.x <= 0 and self.direction == -1) or
                (self.grid_pos.x > boundaries.x-1 and self.direction == 1)):
            self.grid_pos.y += 1
            self.direction *= -1

        self.update_pixel_pos()

    def fire(self):
        return AlienBullet(Game.pixel_to_grid(self.rect.center))

class SpaceShip(Node):
    def __init__(self):
        super().__init__(Vector2(0, 8 ), "assets/ship.png")
        self.move_command = Vector2(0, 0)

    def process_input(self, event):
        if event.key == pygame.K_RIGHT:
            self.move_command.x = 1
        elif event.key == pygame.K_LEFT:
            self.move_command.x = -1

    def update(self, boundaries, delta):
        self.grid_pos += self.move_command

        if self.grid_pos.x < 0:
            self.grid_pos.x = 0
        elif self.grid_pos.x >= boundaries.x:
            self.grid_pos.x = boundaries.x - 1
        self.update_pixel_pos()
        self.move_command = Vector2(0, 0)

    def shoot(self):
        return SpaceShipBullet(Game.pixel_to_grid(self.rect.center))

class Bullet(Node):
    def __init__(self, grid_pos):
        super().__init__(grid_pos)

    def update(self, boundaries, delta):
        self.grid_pos.y += self.direction * self.speed * delta
        if self.grid_pos.y < 0:
            self.kill()
        self.update_pixel_pos()

    def create_sprite(self, color, triangle_points):
        self.image = pygame.Surface((16, 16), pygame.SRCALPHA)  # Use SRCALPHA for transparency
        self.image.fill((0, 0, 0, 0))  # Fill with transparent background
        pygame.draw.polygon(self.image, color, triangle_points)


class SpaceShipBullet(Bullet):
    def __init__(self, grid_pos):
        self.speed = 5
        self.direction = -1
        super().__init__(grid_pos)

    def set_texture(self, texture):
        self.create_sprite((255, 165, 0), triangle_points=[(0, 16), (8, 0), (16, 16)])


class AlienBullet(Bullet):
    def __init__(self, grid_pos):
        self.speed = 5
        self.direction = 1
        super().__init__(grid_pos)

    def set_texture(self, texture):
        self.create_sprite((255, 0, 0), triangle_points = [(0, 0), (16, 0), (8, 16)])

class Scene:
    def __init__(self):
        self.player_sprites = Group()
        self.alien_sprites = Group()
        self.bullet_sprites = Group()
        self.alien_bullet_sprites = Group()

        self.explosion_sprites = Group()

        self.space_ship = SpaceShip()
        self.player_sprites.add(self.space_ship)

        pygame.time.set_timer(AlienShip.ALIEN_SPAWN_EVENT, 1000)

    def process_input(self, event):
        if event.type == AlienShip.ALIEN_SPAWN_EVENT:
            alien_ship = AlienShip()
            self.alien_sprites.add(alien_ship)
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                self.bullet_sprites.add(self.space_ship.shoot())
            else:
                self.space_ship.process_input(event)


    def update(self, boundaries, delta):

        collisions = pygame.sprite.groupcollide(self.bullet_sprites, self.alien_sprites, True, True)

        for bullet, alien in collisions.items():
            explosion = AnimatedSprite(alien[0].grid_pos, "assets/Explosion.png", 10,
                                       64, 64, 3, False)
            self.explosion_sprites.add(explosion)

        if len(self.alien_sprites) > 0:
            self.alien_firing_mechanism()

        self.alien_sprites.update(boundaries, delta)
        self.player_sprites.update(boundaries, delta)
        self.bullet_sprites.update(boundaries, delta)
        self.explosion_sprites.update(boundaries, delta)
        self.alien_bullet_sprites.update(boundaries, delta)

    def render(self, window):
        self.alien_sprites.draw(window)
        self.player_sprites.draw(window)
        self.bullet_sprites.draw(window)
        self.explosion_sprites.draw(window)
        self.alien_bullet_sprites.draw(window)

    def alien_firing_mechanism(self):
        # Choose a random alien to fire with some probability
        if random.random() < 0.01:  # 1% chance per frame that an alien fires
            alien = random.choice(self.alien_sprites.sprites())
            self.alien_bullet_sprites.add(alien.fire())
class Game:
    CELL_SIZE = Vector2(64, 64)
    WORLD_SIZE = Vector2(16, 10)

    def grid_to_pixel(grid_pos: Vector2):
        return grid_pos.elementwise() * Game.CELL_SIZE

    def pixel_to_grid(pixel_pos: Vector2):
        return Vector2(pixel_pos).elementwise()/ Game.CELL_SIZE

    def __init__(self):
        pygame.init()
        self.window_size = Game.WORLD_SIZE.elementwise() * Game.CELL_SIZE
        self.window = pygame.display.set_mode((int(self.window_size.x), int(self.window_size.y)))

        self.scene = Scene()

        # Loop properties
        self.clock = pygame.time.Clock()
        self.running = True

    def process_input(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
                break
            else:
                self.scene.process_input(event)

    def update(self, delta_time):
        self.scene.update(Game.WORLD_SIZE, delta_time)

    def render(self):
        self.window.fill((0, 0, 0))
        self.scene.render(self.window)
        pygame.display.update()

    def run(self):
        while self.running:
            """the delta time is the time since the last frame which is
            approx 1000ms/60ms (since there are 60 frames in 1 second i.e. 1000ms) then divided by 
            1000 to get delta time in seconds"""

            delta_time = self.clock.tick(60) / 1000.0
            self.process_input()
            self.update(delta_time)
            self.render()


game = Game()
game.run()
pygame.quit()
