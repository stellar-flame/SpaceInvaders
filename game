import os
import pygame
from pygame.math import Vector2

os.environ['SDL_VIDEO_CENTERED'] = '1'


class Node:
    def __init__(self, pos):
        self.pos = pos

    def process_input(self, event):
        pass

    def update(self, boundaries, delta):
        pass

    def render(self, window, cell_size):
        sprite_point = self.pos.elementwise() * cell_size
        window.blit(self.get_texture(), sprite_point)

    def get_texture(self):
        pass


class AlienShip(Node):
    ALIEN_SPAWN_EVENT = pygame.USEREVENT + 1
    TEXTURE = pygame.image.load("assets/alien.png")

    def __init__(self):
        super().__init__(Vector2(16, 0))
        self.speed = 5
        self.direction = -1

    def update(self, boundaries, delta):
        self.pos.x += self.direction * self.speed * delta

        if ((self.pos.x < 0 and self.direction == -1) or
                (self.pos.x > boundaries.x-1 and self.direction == 1)) :
            self.pos.y += 1
            self.direction *= -1

    def get_texture(self):
        return AlienShip.TEXTURE


class SpaceShip(Node):
    TEXTURE = pygame.image.load("assets/ship.png")

    def __init__(self):
        super().__init__(Vector2(0, 8))
        self.move_command = Vector2(0, 0)

    def process_input(self, event):
        if event.key == pygame.K_RIGHT:
            self.move_command.x = 1
        elif event.key == pygame.K_LEFT:
            self.move_command.x = -1

    def update(self,  boundaries, delta):
        self.pos += self.move_command

        if self.pos.x < 0:
            self.pos.x = 0
        elif self.pos.x >= boundaries.x:
            self.pos.x = boundaries.x - 1

        if self.pos.y < 0:
            self.pos.y = 0
        elif self.pos.y >= boundaries.y:
            self.pos.y = boundaries.y - 1

        self.move_command = Vector2(0, 0)

    def get_texture(self):
        return SpaceShip.TEXTURE

class Bullet:
    def __init__(self, start_pos):
        self.speed = 100
        self.start_pos = start_pos


class Scene(Node):
    def __init__(self):
        super().__init__(Vector2(0,0))
        self.space_ship = SpaceShip()
        self.alien_ships = []
        pygame.time.set_timer(AlienShip.ALIEN_SPAWN_EVENT, 1000)

    def process_input(self, event):
        if event.type == AlienShip.ALIEN_SPAWN_EVENT:
            alien_ship = AlienShip()
            self.alien_ships.append(alien_ship)
        elif event.type == pygame.KEYDOWN:
            self.space_ship.process_input(event)

    def update(self, boundaries, delta):
        for ship in self.alien_ships:
            ship.update(boundaries, delta)
        self.space_ship.update(boundaries, delta)

    def render(self, window, cell_size):
        for ship in self.alien_ships:
            ship.render(window, cell_size)
        self.space_ship.render(window, cell_size)


class UserInterface:
    def __init__(self):
        pygame.init()
        self.scene = Scene()
        self.world_size = Vector2(16, 10)
        self.cellSize = Vector2(64,64)

        # Window
        window_size = self.world_size.elementwise() * self.cellSize
        self.window = pygame.display.set_mode((int(window_size.x),int(window_size.y)))

        # Loop properties
        self.clock = pygame.time.Clock()
        self.running = True

    def process_input(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
                break
            else:
                self.scene.process_input(event)

    def update(self, delta_time):
        self.scene.update(self.world_size, delta_time)

    def render(self):
        self.window.fill((0, 0, 0))
        self.scene.render(self.window, self.cellSize)
        pygame.display.update()

    def run(self):
        while self.running:
            """the delta time is the time since the last frame which is
            approx 1000ms/60ms (since there are 60 frames in 1 second i.e. 1000ms) then divided by 
            1000 to get delta time in seconds"""

            delta_time = self.clock.tick(60) / 1000.0
            self.process_input()
            self.update(delta_time)
            self.render()


ui = UserInterface()
ui.run()

pygame.quit()