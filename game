import os
import pygame
from pygame.math import Vector2
from pygame.sprite import Group

os.environ['SDL_VIDEO_CENTERED'] = '1'


class Node(pygame.sprite.Sprite):
    def __init__(self, grid_pos, texture):
        super().__init__()
        self.image = pygame.image.load(texture).convert_alpha()
        self.rect = self.image.get_rect()
        self.grid_pos = grid_pos
        self.update_pixel_pos()

    def update_pixel_pos(self):
        self.rect.topleft = Game.grid_to_pixel(self.grid_pos)

    def process_input(self, event):
        pass

    def update(self, boundaries, delta):
        pass


class AlienShip(Node):
    ALIEN_SPAWN_EVENT = pygame.USEREVENT + 1

    def __init__(self):
        super().__init__(Vector2(16, 0), "assets/alien.png")
        self.speed = 5
        self.direction = -1

    def update(self, boundaries, delta):
        self.grid_pos.x += self.direction * self.speed * delta

        if ((self.grid_pos.x < 0 and self.direction == -1) or
                (self.grid_pos.x > boundaries.x and self.direction == 1)):
            self.grid_pos.y += 1
            self.direction *= -1

        self.update_pixel_pos()

class SpaceShip(Node):
    def __init__(self):
        super().__init__(Vector2(0, 8 ), "assets/ship.png")
        self.move_command = Vector2(0, 0)

    def process_input(self, event):
        if event.key == pygame.K_RIGHT:
            self.move_command.x = 1
        elif event.key == pygame.K_LEFT:
            self.move_command.x = -1
        elif event.key == pygame.K_SPACE:
            self.shoot()

    def shoot(self):
        self.bullet = Bullet(Vector2(self.rect.x + Game.CELL_SIZE / 2, self.rect.y + Game.CELL_SIZE / 2))

    def update(self, boundaries, delta):
        self.grid_pos += self.move_command

        if self.rect.x < 0:
            self.rect.x = 0
        elif self.rect.x >= boundaries.x:
            self.rect.x = boundaries.x - 1
        self.update_pixel_pos()
        self.move_command = Vector2(0, 0)


class Bullet:
    def __init__(self, start_pos):
        self.speed = 100
        self.start_pos = start_pos


class Scene:
    def __init__(self):
        self.player_sprites = Group()
        self.alien_sprites = Group()

        self.space_ship = SpaceShip()
        self.player_sprites.add(self.space_ship)

        pygame.time.set_timer(AlienShip.ALIEN_SPAWN_EVENT, 1000)

    def process_input(self, event):
        if event.type == AlienShip.ALIEN_SPAWN_EVENT:
            alien_ship = AlienShip()
            self.alien_sprites.add(alien_ship)
        elif event.type == pygame.KEYDOWN:
            self.space_ship.process_input(event)

    def update(self, boundaries, delta):
        self.alien_sprites.update(boundaries, delta)
        self.player_sprites.update(boundaries, delta)

    def render(self, window):
        self.alien_sprites.draw(window)
        self.player_sprites.draw(window)


class Game:
    CELL_SIZE = Vector2(64, 64)
    WORLD_SIZE = Vector2(16, 10)

    def grid_to_pixel(grid_pos: Vector2):
        return grid_pos.elementwise() * Game.CELL_SIZE

    def __init__(self):
        pygame.init()
        self.window_size = Game.WORLD_SIZE.elementwise() * Game.CELL_SIZE
        self.window = pygame.display.set_mode((int(self.window_size.x), int(self.window_size.y)))

        self.scene = Scene()

        # Loop properties
        self.clock = pygame.time.Clock()
        self.running = True

    def process_input(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
                break
            else:
                self.scene.process_input(event)

    def update(self, delta_time):
        self.scene.update(Game.WORLD_SIZE, delta_time)

    def render(self):
        self.window.fill((0, 0, 0))
        self.scene.render(self.window)
        pygame.display.update()

    def run(self):
        while self.running:
            """the delta time is the time since the last frame which is
            approx 1000ms/60ms (since there are 60 frames in 1 second i.e. 1000ms) then divided by 
            1000 to get delta time in seconds"""

            delta_time = self.clock.tick(60) / 1000.0
            self.process_input()
            self.update(delta_time)
            self.render()


game = Game()
game.run()
pygame.quit()
